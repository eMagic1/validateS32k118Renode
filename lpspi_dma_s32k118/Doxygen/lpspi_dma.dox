/*!
    @page lpspi_dma_s32k118_group LPSPI DMA 
    @brief Driver example that will show the LPSPI Master and Slave functionalities
    
    ## Application description ##
    ______
    The purpose of this application is to show you how to use the Low Power Serial Peripheral Interface on the S32K118 using the S32 SDK API.

    The application uses two on board instances of LPSPI, one in master configuration and the other one is slave to communicate data via the SPI bus using DMA.
    
    To check if the transmission is successful the user has to verify that the isTransferOk variable is true. The isTransferOk variable should be checked after the program reach end of main routine
   (line 161 - breakpoint should be set here, program shouldn't be pause until it reach this line). 
	
    ## Prerequisites ##
    ______
    To run the example you will need to have the following items:
    - 1 S32K118 board
    - 1 Power Adapter 12V (if the board cannot be powered from the USB port)
    - 4 Dupont male to male cables
    - 1 Personal Computer
    - 1 Jlink Lite Debugger (optional, users can use Open SDA)
    
    ## Boards supported ##
    ______
    The following boards are supported by this application:
    - S32K118EVB-Q100
    - S32K118-MB
    
    ## Hardware Wiring ##
    ______    
    The following connections must be done to for this example application to work:
    
    PIN FUNCTION    | S32K118EVB-Q100 |	S32K118-MB
    ----------------|---------------|--------------
    LPSPI0 CS (\b PTB5)     |J2.3  - J1.8   |   J10.28 - J13.32
    LPSPI0 SCK  (\b PTB2)   |J2.6  - J1.9   |   J10.29 - J12.31
    LPSPI0 MOSI (\b PTB3)   |J2.5  - J1.6   |   J13.30 - J13.31
    LPSPI0 MISO (\b PTB4)   |J2.4  - J1.11  |   J10.27 - J10.29
    LPSPI1 CS   (\b PTE1)   |J1.8  - J2.3   |   J13.32 - J10.28
    LPSPI1 SCK  (\b PTD0)   |J1.9  - J2.6   |   J12.31 - J10.29
    LPSPI1 MOSI (\b PTD1)   |J1.11 - J2.4   |   J12.32 - J10.27
    LPSPI1 MISO (\b PTE0)   |J1.6  - J2.5   |   J13.31 - J13.30
		
    
    ## How to run ##
    ______
    
    #### 1. Importing the project into the workspace ####
    After opening S32 Design Studio, go to \b File -> \b New \b S32DS \b Project \b From... and select \b lpspi_dma_s32k118. Then click on \b Finish. \n
    The project should now be copied into you current workspace.
    #### 2. Generating the Processor Expert configuration ####
    First go to \b Project \b Explorer View in S32 DS and select the current project(\b lpspi_dma_s32k118). Then go to \b Project and click on \b Generate \b Processor \b Expert \b Code \n
    Wait for the code generation to be completed before continuing to the next step.
    #### 3. Building the project ####
    Select the configuration to be built \b FLASH (Debug_FLASH) by left clicking on the downward arrow corresponding to the \b build button(@image hammer.png). 
    Wait for the build action to be completed before continuing to the next step.
    #### 4. Running the project ####
    Go to \b Run and select \b Debug \b Configurations. There will be two debug configurations for this project:
     Configuration Name | Description
     -------------------|------------
     \b lpspi_dma_s32k118_debug_flash_jlink | Debug the FLASH configuration using Segger Jlink debuggers
     \b lpspi_dma_s32k118_debug_flash_pemicro | Debug the FLASH configuration using PEMicro debuggers 
    \n Select the desired debug configuration and click on \b Launch. Now the perspective will change to the \b Debug \b Perspective. \n
    Use the controls to control the program flow.
    
    @note For more detailed information related to S32 Design Studio usage please consult the available documentation.
    

*/

